// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

package vips

// #include "vips.h"
import "C"

import (
	"fmt"
	"strconv"
	"strings"
	"sync"
)

// Image contains a libvips image and manages its lifecycle.
type Image struct {
	// NOTE: We keep a reference to this so that the input buffer is
	// never garbage collected during processing. Some image loaders use random
	// access transcoding and therefore need the original buffer to be in memory.
	buf    []byte
	image  *C.VipsImage
	format ImageType
	lock   sync.Mutex

	pageHeight int // cached page height
}

{{range .Operations}}{{if and (or (not .HasImageInput) .HasArrayImageInput) .HasImageOutput}}
{{generateOptionalInputsStruct .}}
// New{{.GoName}} {{.Description}}
func New{{.GoName}}({{generateCreatorMethodParams .}}) (*Image, error) {
	{{generateCreatorMethodBody .}}
}
{{end}}{{end}}

{{range .Operations}}{{if and .HasImageInput (not .HasArrayImageInput)}}
{{generateOptionalInputsStruct .}}
// {{.GoName}} {{.Description}}
func (r *Image) {{.GoName}}({{generateImageMethodParams .}}) ({{generateImageMethodReturnTypes .}}) {
	{{generateImageMethodBody .}}
}
{{end}}{{end}}

{{range .Operations}}{{if and (or (not .HasImageInput) .HasArrayImageInput) (not .HasImageOutput)}}
// {{.GoName}} {{.Description}}
func {{.GoName}}({{generateCreatorMethodParams .}}) ([]byte, error) {
    StartupDefault()
    return vipsgen{{.GoName}}({{generateFunctionCallArgsWithoutThis .}})
}
{{end}}{{end}}

// LoadOptions are options for loading an image. Some are type-specific.
// For default loading, use DefaultLoadOptions() or specify nil
type LoadOptions struct {
	AutoRotate  bool
	FailOnError bool
	Page        int
	NumPages    int
	Density     int

	JpegShrinkFactor int
	HeifThumbnail    bool
	SvgUnlimited     bool
}

// DefaultLoadOptions creates default LoadOptions
func DefaultLoadOptions() *LoadOptions {
	return &LoadOptions{
		FailOnError: true,
	}
}

// OptionString convert import params to option_string
func (i *LoadOptions) OptionString() string {
	var values []string
	if v := i.NumPages; v != 0 {
		values = append(values, "n="+strconv.Itoa(v))
	}
	if v := i.Page; v != 0 {
		values = append(values, "page="+strconv.Itoa(v))
	}
	if v := i.Density; v != 0 {
		values = append(values, "dpi="+strconv.Itoa(v))
	}
	if v := i.FailOnError; v {
		values = append(values, "fail="+boolToStr(v))
	}
	if v := i.JpegShrinkFactor; v != 0 {
		values = append(values, "shrink="+strconv.Itoa(v))
	}
	if v := i.AutoRotate; v {
		values = append(values, "autorotate="+boolToStr(v))
	}
	if v := i.SvgUnlimited; v {
		values = append(values, "unlimited="+boolToStr(v))
	}
	if v := i.HeifThumbnail; v {
		values = append(values, "thumbnail="+boolToStr(v))
	}
	return strings.Join(values, ",")
}

// NewImageFromSource loads a Source and creates a new Image
// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-source
func NewImageFromSource(s *Source, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsImageFromSource(s.src, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, nil), nil
}

// NewThumbnailFromSource loads a Source and creates a new Image with thumbnail crop and resize
// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail-source
func NewThumbnailFromSource(s *Source, width, height int, crop Interesting, size Size, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsThumbnailFromSource(
		s.src, width, height, crop, size, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, nil), nil
}

// NewImageFromBuffer loads an image buffer and creates a new Image
// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-buffer
func NewImageFromBuffer(buf []byte, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsImageFromBuffer(buf, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, buf), nil
}

// NewImageFromFile loads an image from file and creates a new Image
// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-file
func NewImageFromFile(file string, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsImageFromFile(file, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, nil), nil
}

// NewThumbnailFromFile loads a thumbnail from file with crop and resize
// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail
func NewThumbnailFromFile(file string, width, height int, crop Interesting, size Size, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsThumbnailFromFile(file, width, height, crop, size, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, nil), nil
}

// NewThumbnailFromBuffer loads a thumbnail from buffer with crop and resize
// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail-buffer
func NewThumbnailFromBuffer(buf []byte, width, height int, crop Interesting, size Size, options *LoadOptions) (*Image, error) {
	StartupDefault()
	if options == nil {
		options = DefaultLoadOptions()
	}
	vipsImage, format, err := vipsThumbnailFromBuffer(buf, width, height, crop, size, options)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, buf), nil
}

// NewImageFromMemory loads a raw RGB/RGBA image buffer and creates a new Image
// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-memory
func NewImageFromMemory(buf []byte, width, height, bands int) (*Image, error) {
	StartupDefault()
	vipsImage, format, err := vipsImageFromMemory(buf, width, height, bands)
	if err != nil {
		return nil, err
	}
	return newImageRef(vipsImage, format, buf), nil
}


func newImageRef(vipsImage *C.VipsImage, format ImageType, buf []byte) *Image {
	imageRef := &Image{
		image:  vipsImage,
		format: format,
		buf:    buf,
	}
	log("vipsgen", LogLevelDebug, fmt.Sprintf("created imageRef %p", imageRef))
	return imageRef
}

// setImage resets the image for this image and frees the previous one
func (r *Image) setImage(image *C.VipsImage) {
	r.lock.Lock()
	defer r.lock.Unlock()
	if r.image == image {
		return
	}
	if r.image != nil {
		clearImage(r.image)
	}
	r.image = image
	r.pageHeight = 0
}

// Close closes the image and frees the memory
func (r *Image) Close() {
	r.lock.Lock()
	if r.image != nil {
		clearImage(r.image)
		r.image = nil
		log("vipsgen", LogLevelDebug, fmt.Sprintf("closing image %p", r))
	}
	r.buf = nil
	r.lock.Unlock()
}

// Format returns the initial format of the vips image when loaded.
func (r *Image) Format() ImageType {
	return r.format
}

// Width returns the width of this image.
func (r *Image) Width() int {
	return int(r.image.Xsize)
}

// Height returns the height of this image.
func (r *Image) Height() int {
	return int(r.image.Ysize)
}

// Bands returns the number of bands for this image.
func (r *Image) Bands() int {
	return int(r.image.Bands)
}

// HasAlpha returns if the image has an alpha layer.
func (r *Image) HasAlpha() bool {
	return vipsHasAlpha(r.image)
}

// Orientation returns the orientation number as it appears in the Exif, if present
func (r *Image) Orientation() int {
	return vipsGetMetaOrientation(r.image)
}

// Interpretation returns the current interpretation of the color space of the image.
func (r *Image) Interpretation() Interpretation {
	return Interpretation(int(r.image.Type))
}

// Pages returns the number of pages in the Image
// For animated images this corresponds to the number of frames
func (r *Image) Pages() int {
    {{range .ImageTypes}}{{if eq .TypeName "jp2k"}}
    // libvips uses the same attribute (n_pages) to represent the number of pyramid layers in JP2K
    // as we interpret the attribute as frames and JP2K does not support animation we override this with 1
    if r.format == ImageTypeJp2k {
        return 1
    }
    {{end}}{{end}}
    return vipsGetImageNPages(r.image)
}

// PageHeight return the height of a single page
func (r *Image) PageHeight() int {
	if r.pageHeight == 0 {
		r.pageHeight = vipsGetPageHeight(r.image)
	}
	return r.pageHeight
}

// SetPageHeight set the height of a page
// For animated images this is used when "unrolling" back to frames
func (r *Image) SetPageHeight(height int) error {
	vipsSetPageHeight(r.image, height)
	r.pageHeight = height
	return nil
}

// SetPageDelay set the page delay array for animation
func (r *Image) SetPageDelay(delay []int) error {
	var data []C.int
	for _, d := range delay {
		data = append(data, C.int(d))
	}
	return vipsImageSetDelay(r.image, data)
}
