// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

#include "vips.h"

static void logging_handler(const gchar *log_domain,
                                   GLogLevelFlags log_level,
                                   const gchar *message, gpointer user_data) {
  goLoggingHandler((char *)log_domain, (int)log_level, (char *)message);
}

static void null_logging_handler(const gchar *log_domain,
                                 GLogLevelFlags log_level, const gchar *message,
                                 gpointer user_data) {}

void set_logging_handler(void) {
  g_log_set_default_handler(logging_handler, NULL);
}

void unset_logging_handler(void) {
  g_log_set_default_handler(null_logging_handler, NULL);
}


static gint64 go_read(VipsSourceCustom *source_custom, void *buffer, gint64 length, void* ptr)
{
  return goSourceRead(ptr, buffer, length);
}

static gint64 go_seek(VipsSourceCustom *source_custom, gint64 offset, int whence, void* ptr)
{
  return goSourceSeek(ptr, offset, whence);
}

VipsSourceCustom * create_go_custom_source(void* ptr)
{
  VipsSourceCustom * source_custom = vips_source_custom_new();
  g_signal_connect(source_custom, "read", G_CALLBACK(go_read), ptr);
  return source_custom;
}

VipsSourceCustom * create_go_custom_source_with_seek(void* ptr)
{
  VipsSourceCustom * source_custom = vips_source_custom_new();
  g_signal_connect(source_custom, "read", G_CALLBACK(go_read), ptr);
  g_signal_connect(source_custom, "seek", G_CALLBACK(go_seek), ptr);
  return source_custom;
}


{{range .Operations}}
int {{.Name}}_wrapper({{range $i, $arg := .RequiredInputs}}{{if $i}}, {{end}}{{$arg.CType}} {{$arg.Name}}{{end}}, VipsImage **out) {
	return vips_{{.Name}}({{range $i, $arg := .RequiredInputs}}{{if $i}}, {{end}}{{$arg.Name}}{{end}}, out, NULL);
}
{{end}}
