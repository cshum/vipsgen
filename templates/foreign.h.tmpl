// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

// clang-format off
// include order matters
#include <stdlib.h>

#include <vips/vips.h>
#include <vips/foreign.h>
// clang-format n

// Function declarations for save buffer wrapper functions
// These will only be defined in the C file if the corresponding saver is available

{{if .HasJpegSaver}}
int jpegsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int strip,
                         int optimize_coding, int interlace, int subsample_mode,
                         int trellis_quant, int overshoot_deringing,
                         int optimize_scans, int quant_table);
{{end}}

{{if .HasPngSaver}}
int pngsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int compression, int strip,
                        int interlace, int filter, int palette, int quality,
                        double dither, int bitdepth);
{{end}}

{{if .HasWebpSaver}}
int webpsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int strip,
                         int lossless, int near_lossless, int reduction_effort);

int webpsave_buffer_profile_wrapper(VipsImage *in, VipsBlob **out, int quality, int strip,
                                 int lossless, int near_lossless, int reduction_effort,
                                 const char* profile);
{{end}}

{{if .HasHeifSaver}}
int heifsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int lossless);
{{end}}

{{if .HasTiffSaver}}
int tiffsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int strip,
                         int compression, int predictor, int pyramid, int tile,
                         int tile_width, int tile_height, double xres, double yres);
{{end}}

{{if .HasCgifSaver}}
int gifsave_buffer_wrapper(VipsImage *in, VipsBlob **out, double dither, int effort, int bitdepth);
{{end}}

{{if .HasLegacyGifSaver}}
int magicksave_buffer_wrapper(VipsImage *in, VipsBlob **out, const char* format, int quality);
{{end}}

{{if .HasAvifSaver}}
int avifsave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int lossless,
                         int speed, int strip);
{{end}}

{{if .HasJp2kSaver}}
int jp2ksave_buffer_wrapper(VipsImage *in, VipsBlob **out, int quality, int lossless,
                         int tile_width, int tile_height, int subsample_mode);
{{end}}

// Conditionally define saver support macros based on detected savers
{{if .HasJpegSaver}}#define HAS_JPEG_SAVER 1{{else}}#define HAS_JPEG_SAVER 0{{end}}
{{if .HasPngSaver}}#define HAS_PNG_SAVER 1{{else}}#define HAS_PNG_SAVER 0{{end}}
{{if .HasWebpSaver}}#define HAS_WEBP_SAVER 1{{else}}#define HAS_WEBP_SAVER 0{{end}}
{{if .HasTiffSaver}}#define HAS_TIFF_SAVER 1{{else}}#define HAS_TIFF_SAVER 0{{end}}
{{if .HasHeifSaver}}#define HAS_HEIF_SAVER 1{{else}}#define HAS_HEIF_SAVER 0{{end}}
{{if .HasLegacyGifSaver}}#define HAS_LEGACY_GIF_SAVER 1{{else}}#define HAS_LEGACY_GIF_SAVER 0{{end}}
{{if .HasCgifSaver}}#define HAS_CGIF_SAVER 1{{else}}#define HAS_CGIF_SAVER 0{{end}}
{{if .HasAvifSaver}}#define HAS_AVIF_SAVER 1{{else}}#define HAS_AVIF_SAVER 0{{end}}
{{if .HasJp2kSaver}}#define HAS_JP2K_SAVER 1{{else}}#define HAS_JP2K_SAVER 0{{end}}

// Blob helper function to extract data as bytes and handle cleanup
// Returns NULL and sets vips error on failure
unsigned char* blob_to_bytes(VipsBlob *blob, size_t *len);
