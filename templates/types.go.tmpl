// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

package vips

// #include <vips/vips.h>
import "C"
import "strings"

// ImageType represents an image type
type ImageType int

// ImageType enum
const (
{{range .ImageTypes}}	{{.EnumName}} ImageType = {{.Order}}
{{end}})

{{range .EnumTypes}}
// {{.GoName}} represents {{.CName}} type
type {{.GoName}} int

// {{.GoName}} enum
const (
{{$typeName := .GoName}}{{range .Values}}	{{.GoName}} {{$typeName}} = C.{{.CName}}
{{end}})
{{end}}

// ImageTypes defines the various image types supported by vips
var ImageTypes = map[ImageType]string{
{{range .ImageTypes}}{{if ne .TypeName "unknown"}}	{{.EnumName}}: "{{.TypeName}}",
{{end}}{{end}}}

// ImageMimeTypes map the various image types to its mime type representation
var ImageMimeTypes = map[ImageType]string{
{{range .ImageTypes}}{{if and (ne .TypeName "unknown") (ne .MimeType "")}}	{{.EnumName}}: "{{.MimeType}}",
{{end}}{{end}}}

// vipsDetermineImageTypeFromMetaLoader determine the image type from vips-loader metadata
func vipsDetermineImageTypeFromMetaLoader(in *C.VipsImage) ImageType {
	if in != nil {
		if vipsLoader, ok := vipsImageGetMetaLoader(in); ok {
			{{range .ImageTypes}}{{if and (ne .TypeName "unknown") (ne .TypeName "magick")}}if strings.HasPrefix(vipsLoader, "{{.TypeName}}") {
				return {{.EnumName}}
			}
			{{end}}{{end}}// Special case for Magick loader
			if strings.HasPrefix(vipsLoader, "magick") {
				return ImageTypeMagick
			}
		}
	}
	return ImageTypeUnknown
}

// Color represents an RGB
type Color struct {
	R, G, B uint8
}

// ColorRGBA represents an RGB with alpha channel (A)
type ColorRGBA struct {
	R, G, B, A uint8
}
