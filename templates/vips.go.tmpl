// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.
package vips

// #include "vips.h"
import "C"
import (
	"fmt"
	"sync"
	"unsafe"
)

func handleImageError(out *C.VipsImage) error {
	if out != nil {
		clearImage(out)
	}
	return handleVipsError()
}

func handleVipsError() error {
	s := C.GoString(C.vips_error_buffer())
	C.vips_error_clear()

	return fmt.Errorf("%v", s)
}

func freeCString(s *C.char) {
	C.free(unsafe.Pointer(s))
}

func gFreePointer(ref unsafe.Pointer) {
	C.g_free(C.gpointer(ref))
}

func boolToInt(b bool) int {
	if b {
		return 1
	}
	return 0
}

func boolToStr(v bool) string {
	if v {
		return "TRUE"
	}
	return "FALSE"
}

func toGboolean(b bool) C.gboolean {
	if b {
		return C.gboolean(1)
	}
	return C.gboolean(0)
}

func fromGboolean(b C.gboolean) bool {
	return b != 0
}

var cStringsCache sync.Map

func cachedCString(str string) *C.char {
	if cstr, ok := cStringsCache.Load(str); ok {
		return cstr.(*C.char)
	}
	cstr := C.CString(str)
	cStringsCache.Store(str, cstr)
	return cstr
}


// clearImage frees the VipsImage
func clearImage(img *C.VipsImage) {
	C.g_object_unref(C.gpointer(img))
}


func vipsRemoveExif(in *C.VipsImage) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.remove_exif(in, &out); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsGetMetaOrientation(in *C.VipsImage) int {
	return int(C.get_meta_orientation(in))
}

func vipsGetImageNPages(in *C.VipsImage) int {
	return int(C.get_image_n_pages(in))
}

func vipsGetPageHeight(in *C.VipsImage) int {
	return int(C.get_page_height(in))
}

func vipsSetPageHeight(in *C.VipsImage, height int) {
	C.set_page_height(in, C.int(height))
}

func vipsImageGetMetaLoader(in *C.VipsImage) (string, bool) {
	var out *C.char
	defer gFreePointer(unsafe.Pointer(out))
	code := int(C.get_meta_loader(in, &out))
	return C.GoString(out), code == 0
}

func vipsImageSetDelay(in *C.VipsImage, data []C.int) error {
	if n := len(data); n > 0 {
		C.set_image_delay(in, &data[0], C.int(n))
	}
	return nil
}

func vipsGetMetaString(image *C.VipsImage, name string) string {
	return C.GoString(C.get_meta_string(image, cachedCString(name)))
}




{{range .Operations}}
// {{.GoName}} {{.Description}}
// https://libvips.github.io/libvips/API/current/libvips-{{.Category}}.html#vips-{{.Name}}
func {{.GoName}}({{.RequiredInputs | formatArgs}}) (*C.VipsImage, error) {
	var out *C.VipsImage
{{range .RequiredInputs}}{{if eq .GoType "string"}}
	c{{.GoName}} := C.CString({{.GoName}})
	defer freeCString(c{{.GoName}}){{end}}{{end}}

	if err := C.{{.Name}}_wrapper({{range $i, $arg := .RequiredInputs}}{{if $i}}, {{end}}
		{{- if eq $arg.GoType "string"}}c{{$arg.GoName}}
		{{- else if eq $arg.GoType "bool"}}C.int(boolToInt({{$arg.GoName}}))
		{{- else if eq $arg.GoType "*C.VipsImage"}}{{$arg.GoName}}
		{{- else if $arg.IsEnum}}C.{{$arg.Type}}({{$arg.GoName}})
		{{- else}}C.{{$arg.CType}}({{$arg.GoName}}){{- end}}{{end}},
		&out); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}
{{end}}
