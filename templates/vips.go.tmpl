// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.
package vips

// #include "vips.h"
import "C"
import (
	"runtime"
	"unsafe"
)

// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-source
func vipsImageFromSource(
	src *C.VipsSourceCustom, params *LoadParams,
) (*C.VipsImage, ImageType, error) {
	var out *C.VipsImage
	var code C.int
	var optionString string

	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.image_new_from_source(src, &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.image_new_from_source_with_option(src, &out, cOptionString)
	}
	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-buffer
func vipsImageFromBuffer(buf []byte, params *LoadParams) (*C.VipsImage, ImageType, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	var optionString string
	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.image_new_from_buffer(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.image_new_from_buffer_with_option(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out, cOptionString)
	}
	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-file
func vipsImageFromFile(path string, params *LoadParams) (*C.VipsImage, ImageType, error) {
	// Append options to the filename if needed
	filenameOption := path
	if params != nil && params.OptionString() != "" {
		filenameOption += "[" + params.OptionString() + "]"
	}

	cPath := C.CString(filenameOption)
	defer freeCString(cPath)

	var out *C.VipsImage
	code := C.image_new_from_file(cPath, &out)

	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail
func vipsThumbnailFromFile(
	path string, width, height int, crop Interesting, size Size, params *LoadParams) (*C.VipsImage, ImageType, error) {

	// Append options to the filename if needed
	filenameOption := path
	if params != nil && params.OptionString() != "" {
		filenameOption += "[" + params.OptionString() + "]"
	}

	cPath := C.CString(filenameOption)
	defer freeCString(cPath)

	var out *C.VipsImage
	code := C.thumbnail(cPath, &out, C.int(width), C.int(height), C.int(crop), C.int(size))

	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail-buffer
func vipsThumbnailFromBuffer(
	buf []byte, width, height int, crop Interesting, size Size, params *LoadParams) (*C.VipsImage, ImageType, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	var optionString string

	if params != nil {
		optionString = params.OptionString()
	}

	if optionString == "" {
		code = C.thumbnail_buffer(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out,
			C.int(width), C.int(height), C.int(crop), C.int(size))
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.thumbnail_buffer_with_option(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out,
			C.int(width), C.int(height), C.int(crop), C.int(size), cOptionString)
	}

	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

// https://www.libvips.org/API/current/VipsImage.html#vips-image-new-from-buffer
func vipsImageFromMemory(buf []byte, width, height, bands int) (*C.VipsImage, ImageType, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	code = C.image_new_from_memory(unsafe.Pointer(&src[0]), C.size_t(len(src)), C.int(width), C.int(height), C.int(bands), &out)
	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	return out, ImageTypeUnknown, nil
}

// https://www.libvips.org/API/current/libvips-resample.html#vips-thumbnail-source
func vipsThumbnailFromSource(
	src *C.VipsSourceCustom, width, height int, crop Interesting, size Size, params *LoadParams) (*C.VipsImage, ImageType, error) {
	var out *C.VipsImage
	var code C.int
	var optionString string

	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.thumbnail_source(src, &out, C.int(width), C.int(height), C.int(crop), C.int(size))
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.thumbnail_source_with_option(src, &out, C.int(width), C.int(height), C.int(crop), C.int(size), cOptionString)
	}
	if code != 0 {
		return nil, ImageTypeUnknown, handleImageError(out)
	}

	imageType := vipsDetermineImageTypeFromMetaLoader(out)
	return out, imageType, nil
}

func vipsHasAlpha(in *C.VipsImage) bool {
	return int(C.has_alpha_channel(in)) > 0
}

// https://libvips.github.io/libvips/API/current/libvips-conversion.html#vips-copy
func vipsCopyImage(in *C.VipsImage) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.copy_image(in, &out); int(err) != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

// https://libvips.github.io/libvips/API/current/libvips-conversion.html#vips-embed
func vipsEmbed(in *C.VipsImage, left, top, width, height int, extend Extend) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.embed_image(in, &out, C.int(left), C.int(top), C.int(width), C.int(height), C.int(extend)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

// https://libvips.github.io/libvips/API/current/libvips-conversion.html#vips-embed
func vipsEmbedBackground(in *C.VipsImage, left, top, width, height int, backgroundColor *ColorRGBA) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.embed_image_background(in, &out, C.int(left), C.int(top), C.int(width),
		C.int(height), C.double(backgroundColor.R),
		C.double(backgroundColor.G), C.double(backgroundColor.B), C.double(backgroundColor.A)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsEmbedMultiPage(in *C.VipsImage, left, top, width, height int, extend Extend) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.embed_multi_page_image(in, &out, C.int(left), C.int(top), C.int(width), C.int(height), C.int(extend)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsEmbedMultiPageBackground(in *C.VipsImage, left, top, width, height int, backgroundColor *ColorRGBA) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.embed_multi_page_image_background(in, &out, C.int(left), C.int(top), C.int(width),
		C.int(height), C.double(backgroundColor.R),
		C.double(backgroundColor.G), C.double(backgroundColor.B), C.double(backgroundColor.A)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsExtractAreaMultiPage(in *C.VipsImage, left, top, width, height int) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.extract_area_multi_page(in, &out, C.int(left), C.int(top), C.int(width), C.int(height)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

// https://libvips.github.io/libvips/API/current/libvips-conversion.html#vips-rot
func vipsRotateMultiPage(in *C.VipsImage, angle Angle) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.rotate_image_multi_page(in, &out, C.VipsAngle(angle)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsLabel(
	in *C.VipsImage,
	text, font string,
	x, y, size int, align Align,
	color *Color, opacity float64,
) (*C.VipsImage, error) {
	var out *C.VipsImage
	cText := C.CString(text)
	defer freeCString(cText)
	cFont := C.CString(font)
	defer freeCString(cFont)

	err := C.label_image(in, &out, cText, cFont,
		C.int(x), C.int(y), C.int(size), C.VipsAlign(align),
		C.double(color.R), C.double(color.G), C.double(color.B), C.float(float32(opacity)))
	if int(err) != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

// https://libvips.github.io/libvips/API/current/libvips-conversion.html#vips-composite2
func vipsComposite2(base *C.VipsImage, overlay *C.VipsImage, mode BlendMode, x, y int) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.composite2_image(base, overlay, &out, C.int(mode), C.gint(x), C.gint(y)); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsRemoveICCProfile(in *C.VipsImage) bool {
	return fromGboolean(C.remove_icc_profile(in))
}

func vipsRemoveExif(in *C.VipsImage) (*C.VipsImage, error) {
	var out *C.VipsImage

	if err := C.remove_exif(in, &out); err != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsGetMetaOrientation(in *C.VipsImage) int {
	return int(C.get_meta_orientation(in))
}

func vipsGetImageNPages(in *C.VipsImage) int {
	return int(C.get_image_n_pages(in))
}

func vipsGetPageHeight(in *C.VipsImage) int {
	return int(C.get_page_height(in))
}

func vipsSetPageHeight(in *C.VipsImage, height int) {
	C.set_page_height(in, C.int(height))
}

func vipsImageGetMetaLoader(in *C.VipsImage) (string, bool) {
	var out *C.char
	defer gFreePointer(unsafe.Pointer(out))
	code := int(C.get_meta_loader(in, &out))
	return C.GoString(out), code == 0
}

func vipsImageSetDelay(in *C.VipsImage, data []C.int) error {
	if n := len(data); n > 0 {
		C.set_image_delay(in, &data[0], C.int(n))
	}
	return nil
}

func vipsGetMetaString(image *C.VipsImage, name string) string {
	return C.GoString(C.get_meta_string(image, cachedCString(name)))
}


{{range .Operations}}
// {{.GoName}}
// {{generateDocUrl .Name .Category}}
func {{.GoName}}({{formatGoArgList .Arguments}}) ({{formatReturnTypes .}}) {
    {{formatVarDeclarations .}}
    {{$stringConversions := formatStringConversions .Arguments}}{{if $stringConversions}}{{$stringConversions}}{{end}}
    {{$arrayConversions := formatArrayConversions .Arguments}}{{if $arrayConversions}}{{$arrayConversions}}{{end}}
    if err := C.vipsgen_{{.Name}}({{formatFunctionCallArgs .Arguments}}); err != 0 {
        {{formatErrorReturn .HasImageOutput .Outputs}}
    }
    {{formatReturnValues .}}
}
{{end}}
