// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

#include "vips.h"
#include <unistd.h>

// Prerequisites to build, get outputs and cleanup a vips operation

int vipsgen_operation_execute(VipsOperation *operation, ...) {
    va_list ap;
    if (vips_cache_operation_buildp(&operation)) {
        vips_object_unref_outputs(VIPS_OBJECT(operation));
        g_object_unref(operation);
        return 1;
    }
    va_start(ap, operation);
    const char *name;
    while ((name = va_arg(ap, const char *)) != NULL) {
        void *value = va_arg(ap, void *);
        if (value != NULL) {
            g_object_get(VIPS_OBJECT(operation), name, value, NULL);
        }
    }
    va_end(ap);
    vips_object_unref_outputs(VIPS_OBJECT(operation));
    g_object_unref(operation);
    return 0;
}

int vipsgen_operation_save_buffer(VipsOperation *operation, void** buf, size_t* len) {
    if (vips_cache_operation_buildp(&operation)) {
        vips_object_unref_outputs(VIPS_OBJECT(operation));
        g_object_unref(operation);
        return 1;
    }
    VipsBlob *blob;
    g_object_get(VIPS_OBJECT(operation), "buffer", &blob, NULL);
    VipsArea *area = VIPS_AREA(blob);
    *buf = (char *)(area->data);
    *len = area->length;
    area->free_fn = NULL;
    vips_area_unref(area);
    vips_object_unref_outputs(VIPS_OBJECT(operation));
    g_object_unref(operation);
    return 0;
}

int vipsgen_set_int(VipsOperation *operation, const char *name, int value) {
    if (value != 0) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_bool(VipsOperation *operation, const char *name, gboolean value) {
    if (value) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_double(VipsOperation *operation, const char *name, double value) {
    if (value != 0.0) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_guint64(VipsOperation *operation, const char *name, guint64 value) {
    if (value != 0) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_string(VipsOperation *operation, const char *name, const char *value) {
    if (value != NULL && strlen(value) > 0) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_image(VipsOperation *operation, const char *name, VipsImage *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_array_double(VipsOperation *operation, const char *name, VipsArrayDouble *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_array_int(VipsOperation *operation, const char *name, VipsArrayInt *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_array_image(VipsOperation *operation, const char *name, VipsArrayImage *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_interpolate(VipsOperation *operation, const char *name, VipsInterpolate *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

int vipsgen_set_source(VipsOperation *operation, const char *name, VipsSource *value) {
    if (value != NULL) { return vips_object_set(VIPS_OBJECT(operation), name, value, NULL); }
    return 0;
}

// Generated operations
{{range .Operations}}
{{generateCFunctionImplementation .}}
{{end}}

// Custom operations

int vipsgen_image_new_from_source(VipsSourceCustom *source, VipsImage **out) {
  *out = vips_image_new_from_source((VipsSource*) source, "", NULL);
  if (!*out) return 1;
  return 0;
}

int vipsgen_image_new_from_source_with_option(VipsSourceCustom *source, VipsImage **out, const char *option_string) {
  *out = vips_image_new_from_source((VipsSource*) source, option_string, NULL);
  if (!*out) return 1;
  return 0;
}

int vipsgen_image_new_from_file(const char *name, VipsImage **out) {
  *out = vips_image_new_from_file(name, NULL);
  if (!*out) return 1;
  return 0;
}

int vipsgen_image_new_from_buffer(const void *buf, size_t len, VipsImage **out) {
  *out = vips_image_new_from_buffer(buf, len, "", NULL);
  if (!*out) return 1;
  return 0;
}

int vipsgen_image_new_from_memory(const void *buf, size_t len, int width, int height, int bands, VipsImage **out) {
  *out = vips_image_new_from_memory(buf, len, width, height, bands, VIPS_FORMAT_UCHAR);
  if (!*out) return 1;
  return 0;
}

int vipsgen_image_new_from_buffer_with_option(const void *buf, size_t len, VipsImage **out, const char *option_string) {
  *out = vips_image_new_from_buffer(buf, len, option_string, NULL);
  if (!*out) return 1;
  return 0;
}

// Basic image utilities

int has_alpha_channel(VipsImage *image) {
  return vips_image_hasalpha(image);
}

int is_colorspace_supported(VipsImage *in) {
  return vips_colourspace_issupported(in) ? 1 : 0;
}

void clear_image(VipsImage **image) {
  // https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-clear-object
  if (G_IS_OBJECT(*image)) g_clear_object(image);
}

// Generic metadata operations (replace all specific ones)

char **image_get_fields(VipsImage *in) {
  return vips_image_get_fields(in);
}

const char * get_meta_string(const VipsImage *image, const char *name) {
  const char *val;
  if (vips_image_get_typeof(image, name) != 0 && !vips_image_get_string(image, name, &val)) {
    return &val[0];
  }
  return "";
}

int image_has_field(VipsImage *in, const char *name) {
  return vips_image_get_typeof(in, name) != 0 ? 1 : 0;
}

void image_remove_field(VipsImage *in, const char *name) {
  vips_image_remove(in, name);
}

// Array getter/setter functions (keep these as they're commonly used)

int image_get_array_int(VipsImage *in, const char *name, int **out, int *n) {
  return vips_image_get_array_int(in, name, out, n);
}

int image_get_array_double(VipsImage *in, const char *name, double **out, int *n) {
  return vips_image_get_array_double(in, name, out, n);
}

void image_set_array_int(VipsImage *in, const char *name, const int *array, int n) {
  vips_image_set_array_int(in, name, array, n);
}

void image_set_array_double(VipsImage *in, const char *name, const double *array, int n) {
  vips_image_set_array_double(in, name, array, n);
}

// Blob operations (keep these as they handle memory management)

void image_set_blob(VipsImage *in, const char *name, const void *data, size_t dataLength) {
  vips_image_set_blob_copy(in, name, data, dataLength);
}

unsigned long image_get_blob(VipsImage *in, const char *name, const void **data, size_t *dataLength) {
  if (vips_image_get_typeof(in, name) == 0) {
    return 0;
  }
  if (vips_image_get_blob(in, name, data, dataLength)) {
    return -1;
  }
  return 0;
}

int remove_exif(VipsImage *in, VipsImage **out) {
  static double default_resolution = 72.0 / 25.4;

  if (vips_copy(
    in, out,
    "xres", default_resolution,
    "yres", default_resolution,
    NULL
  )) return 1;

  gchar **fields = vips_image_get_fields(in);

  for (int i = 0; fields[i] != NULL; i++) {
    gchar *name = fields[i];
    if (strcmp(name, VIPS_META_ICC_NAME) == 0) continue;
    if (strcmp(name, VIPS_META_ORIENTATION) == 0) continue;
    if (strcmp(name, VIPS_META_N_PAGES) == 0) continue;
    if (strcmp(name, VIPS_META_PAGE_HEIGHT) == 0) continue;
    if (strcmp(name, "palette-bit-depth") == 0) continue;
    vips_image_remove(*out, name);
  }
  g_strfreev(fields);
  return 0;
}

int embed_multi_page(VipsImage *in, VipsImage **out, int left, int top, int width,
                         int height, int extend) {
  VipsObject *base = VIPS_OBJECT(vips_image_new());
  int page_height = vips_image_get_page_height(in);
  int in_width = in->Xsize;
  int n_pages = in->Ysize / page_height;

  VipsImage **page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **embedded_page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **copy = (VipsImage **) vips_object_local_array(base, 1);

  // split image into cropped frames
  for (int i = 0; i < n_pages; i++) {
    if (
      vips_extract_area(in, &page[i], 0, page_height * i, in_width, page_height, NULL) ||
      vips_embed(page[i], &embedded_page[i], left, top, width, height, "extend", extend, NULL)
    ) {
      g_object_unref(base);
      return -1;
    }
  }
  // reassemble frames and set page height
  // copy before modifying metadata
  if(
    vips_arrayjoin(embedded_page, &copy[0], n_pages, "across", 1, NULL) ||
    vips_copy(copy[0], out, NULL)
  ) {
    g_object_unref(base);
    return -1;
  }
  vips_image_set_int(*out, VIPS_META_PAGE_HEIGHT, height);
  g_object_unref(base);
  return 0;
}

int embed_multi_page_background(VipsImage *in, VipsImage **out, int left, int top, int width,
                                   int height, double r, double g, double b, double a) {
  double background[3] = {r, g, b};
  double backgroundRGBA[4] = {r, g, b, a};

  VipsArrayDouble *vipsBackground;

  if (in->Bands <= 3) {
    vipsBackground = vips_array_double_new(background, 3);
  } else {
    vipsBackground = vips_array_double_new(backgroundRGBA, 4);
  }
  VipsObject *base = VIPS_OBJECT(vips_image_new());
  int page_height = vips_image_get_page_height(in);
  int in_width = in->Xsize;
  int n_pages = in->Ysize / page_height;

  VipsImage **page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **embedded_page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **copy = (VipsImage **) vips_object_local_array(base, 1);

  // split image into cropped frames
  for (int i = 0; i < n_pages; i++) {
    if (
      vips_extract_area(in, &page[i], 0, page_height * i, in_width, page_height, NULL) ||
      vips_embed(page[i], &embedded_page[i], left, top, width, height,
          "extend", VIPS_EXTEND_BACKGROUND, "background", vipsBackground, NULL)
    ) {
      vips_area_unref(VIPS_AREA(vipsBackground));
      g_object_unref(base);
      return -1;
    }
  }
  // reassemble frames and set page height
  // copy before modifying metadata
  if(
    vips_arrayjoin(embedded_page, &copy[0], n_pages, "across", 1, NULL) ||
    vips_copy(copy[0], out, NULL)
  ) {
    vips_area_unref(VIPS_AREA(vipsBackground));
    g_object_unref(base);
    return -1;
  }
  vips_image_set_int(*out, VIPS_META_PAGE_HEIGHT, height);
  vips_area_unref(VIPS_AREA(vipsBackground));
  g_object_unref(base);
  return 0;
}

int extract_area_multi_page(VipsImage *in, VipsImage **out, int left, int top, int width, int height) {
  VipsObject *base = VIPS_OBJECT(vips_image_new());
  int page_height = vips_image_get_page_height(in);
  int n_pages = in->Ysize / page_height;

  VipsImage **page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **copy = (VipsImage **) vips_object_local_array(base, 1);

  // split image into cropped frames
  for (int i = 0; i < n_pages; i++) {
    if(vips_extract_area(in, &page[i], left, page_height * i + top, width, height, NULL)) {
      g_object_unref(base);
      return -1;
    }
  }
  // reassemble frames and set page height
  // copy before modifying metadata
  if(
    vips_arrayjoin(page, &copy[0], n_pages, "across", 1, NULL) ||
    vips_copy(copy[0], out, NULL)
  ) {
    g_object_unref(base);
    return -1;
  }
  vips_image_set_int(*out, VIPS_META_PAGE_HEIGHT, height);
  g_object_unref(base);
  return 0;
}

int rot_multi_page(VipsImage *in, VipsImage **out, VipsAngle angle) {
  VipsObject *base = VIPS_OBJECT(vips_image_new());
  int page_height = vips_image_get_page_height(in);
  int in_width = in->Xsize;
  int n_pages = in->Ysize / page_height;

  VipsImage **page = (VipsImage **) vips_object_local_array(base, n_pages);
  VipsImage **copy = (VipsImage **) vips_object_local_array(base, 1);

  // split image into cropped frames
  for (int i = 0; i < n_pages; i++) {
    if (
      vips_extract_area(in, &page[i], 0, page_height * i, in_width, page_height, NULL) ||
      vips_rot(page[i], &page[i], angle, NULL)
    ) {
      g_object_unref(base);
      return -1;
    }
  }
  // reassemble frames and set page height if rotate 90 or 270
  // copy before modifying metadata
  if(
    vips_arrayjoin(page, &copy[0], n_pages, "across", 1, NULL) ||
    vips_copy(copy[0], out, NULL)
  ) {
    g_object_unref(base);
    return -1;
  }
  if (angle == VIPS_ANGLE_D90 || angle == VIPS_ANGLE_D270) {
    vips_image_set_int(*out, VIPS_META_PAGE_HEIGHT, in_width);
  }
  g_object_unref(base);
  return 0;
}

int label_image(VipsImage *in, VipsImage **out,
          const char *text, const char *font,
          int x, int y, int size, VipsAlign align,
          double r, double g, double b, float opacity) {
  double ones[3] = {1, 1, 1};
  double color[3] = {r, g, b};
  int page_height = vips_image_get_page_height(in);
  int in_width = in->Xsize;
  int n_pages = in->Ysize / page_height;
  VipsImage *base = vips_image_new();
  VipsImage **t = (VipsImage **)vips_object_local_array(VIPS_OBJECT(base), 12);
  if (vips_text(&t[0], text, "font", font, "width", 9999, "height", size, NULL) ||
      vips_linear1(t[0], &t[1], opacity, 0.0, NULL) ||
      vips_cast(t[1], &t[2], VIPS_FORMAT_UCHAR, NULL)) {
    g_object_unref(base);
    return 1;
  }
  int text_width = t[0]->Xsize;
  if (align == VIPS_ALIGN_CENTRE) {
    x = x-text_width/2;
  } else if (align == VIPS_ALIGN_HIGH) {
    x = x-text_width;
  }
  if (vips_embed(t[2], &t[3], x, y, in_width, page_height, NULL) ||
      vips_replicate(t[3], &t[10], 1, n_pages, NULL)) {
    g_object_unref(base);
    return 1;
  }
  if (vips_black(&t[4], 1, 1, NULL) ||
      vips_linear(t[4], &t[5], ones, color, 3, NULL) ||
      vips_cast(t[5], &t[6], VIPS_FORMAT_UCHAR, NULL) ||
      vips_copy(t[6], &t[7], "interpretation", in->Type, NULL) ||
      vips_embed(t[7], &t[8], 0, 0, in_width, page_height,
                 "extend", VIPS_EXTEND_COPY, NULL) ||
      vips_addalpha(t[8], &t[9], NULL) ||
      vips_replicate(t[9], &t[11], 1, n_pages, NULL)) {
    g_object_unref(base);
    return 1;
  }
  if (vips_ifthenelse(t[10], t[11], in, out, "blend", TRUE, NULL)) {
    g_object_unref(base);
    return 1;
  }
  g_object_unref(base);
  return 0;
}
