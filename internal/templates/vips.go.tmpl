// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.
package vips

// #include "vips.h"
import "C"
import (
	"runtime"
	"strings"
	"unsafe"
)

{{range .Operations}}
{{generateGoFunctionBody . false}}
{{if gt (len .OptionalInputs) 0}}
{{generateGoFunctionBody . true}}
{{end}}{{end}}

// vipsImageFromSource vips_image_new_from_source
func vipsImageFromSource(src *C.VipsSourceCustom, params *LoadOptions) (*C.VipsImage, error) {
	var out *C.VipsImage
	var code C.int
	var optionString string

	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.vipsgen_image_new_from_source(src, &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.vipsgen_image_new_from_source_with_option(src, &out, cOptionString)
	}
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsImageFromBuffer vips_image_new_from_buffer
func vipsImageFromBuffer(buf []byte, params *LoadOptions) (*C.VipsImage, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	var optionString string
	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.vipsgen_image_new_from_buffer(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.vipsgen_image_new_from_buffer_with_option(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out, cOptionString)
	}
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsImageFromFile vips_image_new_from_file
func vipsImageFromFile(path string, params *LoadOptions) (*C.VipsImage, error) {
	// Append options to the filename if needed
	filenameOption := path
	if params != nil && params.OptionString() != "" {
		filenameOption += "[" + params.OptionString() + "]"
	}

	cPath := C.CString(filenameOption)
	defer freeCString(cPath)

	var out *C.VipsImage
	code := C.vipsgen_image_new_from_file(cPath, &out)

	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsImageFromMemory vips_image_new_memory
func vipsImageFromMemory(buf []byte, width, height, bands int) (*C.VipsImage, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	code = C.vipsgen_image_new_from_memory(unsafe.Pointer(&src[0]), C.size_t(len(src)), C.int(width), C.int(height), C.int(bands), &out)
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsHasAlpha(in *C.VipsImage) bool {
	return int(C.has_alpha_channel(in)) > 0
}

func vipsHasICCProfile(in *C.VipsImage) bool {
	return int(C.has_icc_profile(in)) != 0
}

func vipsGetICCProfile(in *C.VipsImage) ([]byte, bool) {
	var bufPtr unsafe.Pointer
	var dataLength C.size_t
	if int(C.get_icc_profile(in, &bufPtr, &dataLength)) != 0 {
		return nil, false
	}
	buf := C.GoBytes(bufPtr, C.int(dataLength))
	return buf, true
}

func vipsRemoveICCProfile(in *C.VipsImage) bool {
	return fromGboolean(C.remove_icc_profile(in))
}

func vipsHasIPTC(in *C.VipsImage) bool {
	return int(C.has_iptc(in)) != 0
}

func vipsImageGetFields(in *C.VipsImage) (fields []string) {
	const maxFields = 256
	rawFields := C.image_get_fields(in)
	defer C.g_strfreev(rawFields)
	cFields := (*[maxFields]*C.char)(unsafe.Pointer(rawFields))[:maxFields:maxFields]
	for _, field := range cFields {
		if field == nil {
			break
		}
		fields = append(fields, C.GoString(field))
	}
	return
}

func vipsImageGetExifData(in *C.VipsImage) map[string]string {
	fields := vipsImageGetFields(in)
	exifData := map[string]string{}
	for _, field := range fields {
		if strings.HasPrefix(field, "exif") {
			exifData[field] = vipsImageGetString(in, field)
		}
	}
	return exifData
}

func vipsGetMetaOrientation(in *C.VipsImage) int {
	return int(C.get_meta_orientation(in))
}

func vipsRemoveMetaOrientation(in *C.VipsImage) {
	C.remove_meta_orientation(in)
}

func vipsSetMetaOrientation(in *C.VipsImage, orientation int) {
	C.set_meta_orientation(in, C.int(orientation))
}

func vipsGetImageNPages(in *C.VipsImage) int {
	return int(C.get_image_n_pages(in))
}

func vipsSetImageNPages(in *C.VipsImage, pages int) {
	C.set_image_n_pages(in, C.int(pages))
}

func vipsGetPageHeight(in *C.VipsImage) int {
	return int(C.get_page_height(in))
}

func vipsSetPageHeight(in *C.VipsImage, height int) {
	C.set_page_height(in, C.int(height))
}

func vipsImageGetBackground(in *C.VipsImage) ([]float64, error) {
	var out *C.double
	var n C.int
	defer gFreePointer(unsafe.Pointer(out))

	if err := C.get_background(in, &out, &n); err != 0 {
		return nil, handleVipsError()
	}
	return fromCArrayDouble(out, int(n)), nil
}

func vipsImageSetBlob(in *C.VipsImage, name string, data []byte) {
	cData := unsafe.Pointer(&data)
	cDataLength := C.size_t(len(data))
	cField := C.CString(name)
	defer freeCString(cField)
	C.image_set_blob(in, cField, cData, cDataLength)
}

func vipsImageGetBlob(in *C.VipsImage, name string) []byte {
	var bufPtr unsafe.Pointer
	var dataLength C.size_t
	cField := C.CString(name)
	defer freeCString(cField)
	if int(C.image_get_blob(in, cField, &bufPtr, &dataLength)) != 0 {
		return nil
	}
	buf := C.GoBytes(bufPtr, C.int(dataLength))
	return buf
}

func vipsImageSetDouble(in *C.VipsImage, name string, f float64) {
	cField := C.CString(name)
	defer freeCString(cField)
	cDouble := C.double(f)
	C.image_set_double(in, cField, cDouble)
}

func vipsImageGetDouble(in *C.VipsImage, name string) float64 {
	cField := C.CString(name)
	defer freeCString(cField)
	var cDouble C.double
	if int(C.image_get_double(in, cField, &cDouble)) == 0 {
		return float64(cDouble)
	}
	return 0
}

func vipsImageSetInt(in *C.VipsImage, name string, i int) {
	cField := C.CString(name)
	defer freeCString(cField)
	cInt := C.int(i)
	C.image_set_int(in, cField, cInt)
}

func vipsImageGetInt(in *C.VipsImage, name string) int {
	cField := C.CString(name)
	defer freeCString(cField)
	var cInt C.int
	if int(C.image_get_int(in, cField, &cInt)) == 0 {
		return int(cInt)
	}
	return 0
}

func vipsIsColorSpaceSupported(in *C.VipsImage) bool {
	return C.is_colorspace_supported(in) == 1
}

func vipsImageSetString(in *C.VipsImage, name string, str string) {
	cField := C.CString(name)
	defer freeCString(cField)
	cStr := C.CString(str)
	defer freeCString(cStr)
	C.image_set_string(in, cField, cStr)
}

func vipsImageGetString(in *C.VipsImage, name string) string {
	cField := C.CString(name)
	defer freeCString(cField)
	var cFieldValue *C.char
	defer freeCString(cFieldValue)
	if int(C.image_get_string(in, cField, &cFieldValue)) == 0 {
		return C.GoString(cFieldValue)
	}
	return ""
}

func vipsImageGetAsString(in *C.VipsImage, name string) string {
	cField := C.CString(name)
	defer freeCString(cField)
	var cFieldValue *C.char
	defer freeCString(cFieldValue)
	if int(C.image_get_as_string(in, cField, &cFieldValue)) == 0 {
		return C.GoString(cFieldValue)
	}
	return ""
}

func vipsEmbedMultiPage(in *C.VipsImage, left, top, width, height int, extend Extend) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.embed_multi_page(in, &out, C.int(left), C.int(top), C.int(width), C.int(height), C.int(extend)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsEmbedMultiPageBackground(in *C.VipsImage, left, top, width, height,
	backgroundColorR, backgroundColorG, backgroundColorB, backgroundColorA int) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.embed_multi_page_background(in, &out, C.int(left), C.int(top), C.int(width),
		C.int(height), C.double(backgroundColorR),
		C.double(backgroundColorG), C.double(backgroundColorB), C.double(backgroundColorA)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsExtractAreaMultiPage(in *C.VipsImage, left, top, width, height int) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.extract_area_multi_page(in, &out, C.int(left), C.int(top), C.int(width), C.int(height)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsRotMultiPage(in *C.VipsImage, angle Angle) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.rotate_image_multi_page(in, &out, C.VipsAngle(angle)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsLabel(
	in *C.VipsImage,
	text, font string,
	x, y, size int, align Align,
	colorR, colorG, colorB int, opacity float64,
) (*C.VipsImage, error) {
	var out *C.VipsImage
	cText := C.CString(text)
	defer freeCString(cText)
	cFont := C.CString(font)
	defer freeCString(cFont)

	err := C.label_image(in, &out, cText, cFont,
		C.int(x), C.int(y), C.int(size), C.VipsAlign(align),
		C.double(colorR), C.double(colorG), C.double(colorB), C.float(float32(opacity)))
	if int(err) != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsRemoveExif(in *C.VipsImage) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.remove_exif(in, &out); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsImageGetMetaLoader(in *C.VipsImage) (string, bool) {
    var out *C.char
    defer gFreePointer(unsafe.Pointer(out))
    code := int(C.get_meta_loader(in, &out))
    if code != 0 {
        C.vips_error_clear()
        return "", false
    }
    return C.GoString(out), true
}

func vipsImageSetDelay(in *C.VipsImage, delay []int) error {
	cdelay, cn, err := convertToIntArray(delay)
	if err != nil {
		return err
	}
	if cdelay != nil {
		defer freeIntArray(cdelay)
		C.set_image_delay(in, cdelay, cn)
	}
	return nil
}

func vipsGetMetaString(image *C.VipsImage, name string) string {
	return C.GoString(C.get_meta_string(image, cachedCString(name)))
}

