// Code generated by github.com/cshum/vipsgen from libvips {{.VipsVersion}}; DO NOT EDIT.
package vips

// #include "vips.h"
import "C"
import (
	"runtime"
	"unsafe"
)

{{range .Operations}}
{{generateGoFunctionBody . false}}
{{if gt (len .OptionalInputs) 0}}
{{generateGoFunctionBody . true}}
{{end}}{{end}}

// clearImage frees the VipsImage
func clearImage(img *C.VipsImage) {
	C.vipsgen_clear_image(&img)
}

// vipsgenImageFromSource vips_image_new_from_source
func vipsgenImageFromSource(src *C.VipsSourceCustom, params *LoadOptions) (*C.VipsImage, error) {
	var out *C.VipsImage
	var code C.int
	var optionString string

	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.vipsgen_image_new_from_source(src, &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.vipsgen_image_new_from_source_with_option(src, &out, cOptionString)
	}
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsgenImageFromBuffer vips_image_new_from_buffer
func vipsgenImageFromBuffer(buf []byte, params *LoadOptions) (*C.VipsImage, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	var optionString string
	if params != nil {
		optionString = params.OptionString()
	}
	if optionString == "" {
		code = C.vipsgen_image_new_from_buffer(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out)
	} else {
		cOptionString := C.CString(optionString)
		defer freeCString(cOptionString)

		code = C.vipsgen_image_new_from_buffer_with_option(unsafe.Pointer(&src[0]), C.size_t(len(src)), &out, cOptionString)
	}
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsgenImageFromFile vips_image_new_from_file
func vipsgenImageFromFile(path string, params *LoadOptions) (*C.VipsImage, error) {
	// Append options to the filename if needed
	filenameOption := path
	if params != nil && params.OptionString() != "" {
		filenameOption += "[" + params.OptionString() + "]"
	}

	cPath := C.CString(filenameOption)
	defer freeCString(cPath)

	var out *C.VipsImage
	code := C.vipsgen_image_new_from_file(cPath, &out)

	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

// vipsgenImageFromMemory vips_image_new_memory
func vipsgenImageFromMemory(buf []byte, width, height, bands int) (*C.VipsImage, error) {
	src := buf
	// Reference src here so it's not garbage collected during image initialization.
	defer runtime.KeepAlive(src)

	var out *C.VipsImage
	var code C.int
	code = C.vipsgen_image_new_from_memory(unsafe.Pointer(&src[0]), C.size_t(len(src)), C.int(width), C.int(height), C.int(bands), &out)
	if code != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsHasAlpha(in *C.VipsImage) bool {
	return int(C.vips_image_hasalpha(in)) > 0
}

func vipsIsColorSpaceSupported(in *C.VipsImage) bool {
	return int(C.vips_colourspace_issupported(in)) != 0
}

func vipsImageGetFields(in *C.VipsImage) (fields []string) {
	const maxFields = 1024
	rawFields := C.vips_image_get_fields(in)
	defer C.g_strfreev(rawFields)
	cFields := (*[maxFields]*C.char)(unsafe.Pointer(rawFields))[:maxFields:maxFields]
	for _, field := range cFields {
		if field == nil {
			break
		}
		fields = append(fields, C.GoString(field))
	}
	return
}

func vipsImageHasField(in *C.VipsImage, name string) bool {
	cName := C.CString(name)
	defer freeCString(cName)
	return int(C.vips_image_get_typeof(in, cName)) != 0
}

func vipsImageRemoveField(in *C.VipsImage, name string) {
	cName := C.CString(name)
	defer freeCString(cName)
	C.vips_image_remove(in, cName)
}

func vipsImageGetArrayInt(in *C.VipsImage, name string) ([]int, error) {
	var out *C.int
	var n C.int
	cName := C.CString(name)
	defer freeCString(cName)
	if err := C.vips_image_get_array_int(in, cName, &out, &n); err != 0 {
		return nil, handleVipsError()
	}
	result := fromCArrayInt(out, int(n))
	gFreePointer(unsafe.Pointer(out))
	return result, nil
}

func vipsImageGetArrayDouble(in *C.VipsImage, name string) ([]float64, error) {
	var out *C.double
	var n C.int
	cName := C.CString(name)
	defer freeCString(cName)
	if err := C.vips_image_get_array_double(in, cName, &out, &n); err != 0 {
		return nil, handleVipsError()
	}
	result := fromCArrayDouble(out, int(n))
	gFreePointer(unsafe.Pointer(out))
	return result, nil
}

func vipsImageSetBlob(in *C.VipsImage, name string, data []byte) {
	cData := unsafe.Pointer(&data[0])
	cDataLength := C.size_t(len(data))
	cField := C.CString(name)
	defer freeCString(cField)
	C.vips_image_set_blob_copy(in, cField, cData, cDataLength)
}

func vipsImageGetBlob(in *C.VipsImage, name string) ([]byte, error) {
	var bufPtr unsafe.Pointer
	var dataLength C.size_t
	cField := C.CString(name)
	defer freeCString(cField)
	if int(C.vips_image_get_blob(in, cField, &bufPtr, &dataLength)) != 0 {
		return nil, handleVipsError()
	}
	return bufferToBytes(bufPtr, dataLength), nil
}

func vipsHasICCProfile(in *C.VipsImage) bool {
	return int(C.vips_image_get_typeof(in, cachedCString(C.VIPS_META_ICC_NAME))) != 0
}

func vipsGetICCProfile(in *C.VipsImage) ([]byte, bool) {
	if !vipsHasICCProfile(in) {
		return nil, false
	}
	var bufPtr unsafe.Pointer
	var dataLength C.size_t
	if int(C.vips_image_get_blob(in, cachedCString(C.VIPS_META_ICC_NAME), &bufPtr, &dataLength)) != 0 {
		return nil, false
	}
	buf := C.GoBytes(bufPtr, C.int(dataLength))
	return buf, buf != nil
}

func vipsRemoveICCProfile(in *C.VipsImage) bool {
	if vipsHasICCProfile(in) {
		C.vips_image_remove(in, cachedCString(C.VIPS_META_ICC_NAME))
		return true
	}
	return false
}

func vipsHasIPTC(in *C.VipsImage) bool {
	return int(C.vips_image_get_typeof(in, cachedCString(C.VIPS_META_IPTC_NAME))) != 0
}

func vipsGetMetaOrientation(in *C.VipsImage) int {
    orientationFieldName := cachedCString(C.VIPS_META_ORIENTATION)
    if int(C.vips_image_get_typeof(in, orientationFieldName)) == 0 {
        return 0
    }
    var orientation C.int
    if C.vips_image_get_int(in, orientationFieldName, &orientation) == 0 {
        return int(orientation)
    }
    return 0
}

func vipsSetMetaOrientation(in *C.VipsImage, orientation int) {
	C.vips_image_set_int(in, cachedCString(C.VIPS_META_ORIENTATION), C.int(orientation))
}

func vipsRemoveMetaOrientation(in *C.VipsImage) {
	C.vips_image_remove(in, cachedCString(C.VIPS_META_ORIENTATION))
}

func vipsGetImageNPages(in *C.VipsImage) int {
	return int(C.vips_image_get_n_pages(in))
}

func vipsSetImageNPages(in *C.VipsImage, pages int) {
	C.vips_image_set_int(in, cachedCString(C.VIPS_META_N_PAGES), C.int(pages))
}

func vipsGetPageHeight(in *C.VipsImage) int {
	return int(C.vips_image_get_page_height(in))
}

func vipsSetPageHeight(in *C.VipsImage, height int) {
	C.vips_image_set_int(in, cachedCString(C.VIPS_META_PAGE_HEIGHT), C.int(height))
}

func vipsImageSetString(in *C.VipsImage, name string, str string) {
	cField := C.CString(name)
	defer freeCString(cField)
	cStr := C.CString(str)
	defer freeCString(cStr)
	C.vips_image_set_string(in, cField, cStr)
}

func vipsImageGetString(in *C.VipsImage, name string) (string, error) {
	cField := C.CString(name)
	defer freeCString(cField)
	var cFieldValue *C.char
	defer freeCString(cFieldValue)
	if int(C.vips_image_get_string(in, cField, &cFieldValue)) == 0 {
		return C.GoString(cFieldValue), nil
	}
	return "", handleVipsError()
}

func vipsImageGetAsString(in *C.VipsImage, name string) (string, error) {
	cField := C.CString(name)
	defer freeCString(cField)
	var cFieldValue *C.char
	defer freeCString(cFieldValue)
	if int(C.vips_image_get_as_string(in, cField, &cFieldValue)) == 0 {
		return C.GoString(cFieldValue), nil
	}
	return "", handleVipsError()
}

func vipsImageSetDouble(in *C.VipsImage, name string, f float64) {
	cField := C.CString(name)
	defer freeCString(cField)
	cDouble := C.double(f)
	C.vips_image_set_double(in, cField, cDouble)
}

func vipsImageGetDouble(in *C.VipsImage, name string) (float64, error) {
	cField := C.CString(name)
	defer freeCString(cField)
	var cDouble C.double
	if int(C.vips_image_get_double(in, cField, &cDouble)) == 0 {
		return float64(cDouble), nil
	}
	return 0, handleVipsError()
}

func vipsImageSetInt(in *C.VipsImage, name string, i int) {
	cField := C.CString(name)
	defer freeCString(cField)
	cInt := C.int(i)
	C.vips_image_set_int(in, cField, cInt)
}

func vipsImageGetInt(in *C.VipsImage, name string) (int, error) {
	cField := C.CString(name)
	defer freeCString(cField)
	var cInt C.int
	if int(C.vips_image_get_int(in, cField, &cInt)) == 0 {
		return int(cInt), nil
	}
	return 0, handleVipsError()
}

func vipsImageGetMetaLoader(in *C.VipsImage) (string, bool) {
	loaderFieldName := cachedCString(C.VIPS_META_LOADER)
	if int(C.vips_image_get_typeof(in, loaderFieldName)) == 0 {
		return "", false
	}
	var cFieldValue *C.char
	if int(C.vips_image_get_string(in, loaderFieldName, &cFieldValue)) == 0 {
		return C.GoString(cFieldValue), true
	}
	return "", false
}

func vipsgenEmbedMultiPage(in *C.VipsImage, left, top, width, height int, extend Extend) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.vipsgen_embed_multi_page(in, &out, C.int(left), C.int(top), C.int(width), C.int(height), C.int(extend)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsgenEmbedMultiPageBackground(in *C.VipsImage, left, top, width, height,
	backgroundColorR, backgroundColorG, backgroundColorB, backgroundColorA int) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.vipsgen_embed_multi_page_background(in, &out, C.int(left), C.int(top), C.int(width),
		C.int(height), C.double(backgroundColorR),
		C.double(backgroundColorG), C.double(backgroundColorB), C.double(backgroundColorA)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsgenExtractAreaMultiPage(in *C.VipsImage, left, top, width, height int) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.vipsgen_extract_area_multi_page(in, &out, C.int(left), C.int(top), C.int(width), C.int(height)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsgenRotMultiPage(in *C.VipsImage, angle Angle) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.vipsgen_rot_multi_page(in, &out, C.VipsAngle(angle)); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}

func vipsgenLabel(
	in *C.VipsImage,
	text, font string,
	x, y, size int, align Align,
	colorR, colorG, colorB int, opacity float64,
) (*C.VipsImage, error) {
	var out *C.VipsImage
	cText := C.CString(text)
	defer freeCString(cText)
	cFont := C.CString(font)
	defer freeCString(cFont)

	err := C.vipsgen_label(in, &out, cText, cFont,
		C.int(x), C.int(y), C.int(size), C.VipsAlign(align),
		C.double(colorR), C.double(colorG), C.double(colorB), C.float(float32(opacity)))
	if int(err) != 0 {
		return nil, handleImageError(out)
	}

	return out, nil
}

func vipsgenRemoveExif(in *C.VipsImage) (*C.VipsImage, error) {
	var out *C.VipsImage
	if err := C.vipsgen_remove_exif(in, &out); err != 0 {
		return nil, handleImageError(out)
	}
	return out, nil
}
