// Code generated by github.com/cshum/vipsgen. DO NOT EDIT.

package vips

// #include <vips/vips.h>
import "C"
import (
	"strings"
	"unsafe"
)

// ImageType represents an image type
type ImageType string

// ImageType enum
const (
{{range .ImageTypes}}	{{.EnumName}} ImageType = "{{.EnumValue}}"
{{end}})

{{range .EnumTypes}}
// {{.GoName}} represents {{.CName}} type
type {{.GoName}} int

// {{.GoName}} enum
const (
{{$typeName := .GoName}}{{range .Values}}	{{.GoName}} {{$typeName}} = C.{{.CName}}
{{end}})
{{end}}

// imageMimeTypes map the various image types to its mime type representation
var imageMimeTypes = map[ImageType]string{
{{range .ImageTypes}}{{if and (ne .TypeName "unknown") (ne .MimeType "")}}	{{.EnumName}}: "{{.MimeType}}",
{{end}}{{end}}}

// MimeType returns the MIME type for the image type.
func (imageType ImageType) MimeType() (mime string, ok bool) {
	mime, ok = imageMimeTypes[imageType]
	return
}

// vipsDetermineImageType determine the image type from loader metadata
func vipsDetermineImageType(in *C.VipsImage) ImageType {
	if in != nil {
		if vipsLoader, ok := vipsImageGetMetaLoader(in); ok {
			{{range .ImageTypes}}{{if and (ne .TypeName "unknown") (ne .TypeName "magick") .HasLoader}}if strings.HasPrefix(vipsLoader, "{{.TypeName}}") {
				return {{.EnumName}}
			}
			{{end}}{{end}}{{range .ImageTypes}}{{if and (eq .TypeName "magick") .HasLoader}}if strings.HasPrefix(vipsLoader, "magick") {
				return ImageTypeMagick
			}
			{{end}}{{end}}
		}
	}
	return ImageTypeUnknown
}

// Interpolate represents VipsInterpolate type
type Interpolate struct {
	interp *C.VipsInterpolate
}

// InterpolateType represents the type of interpolation to use
type InterpolateType string

// InterpolateType enum - these values match the predefined interpolators in libvips
const (
	InterpolateNearest  InterpolateType = "nearest"
	InterpolateBilinear InterpolateType = "bilinear"
	InterpolateBicubic  InterpolateType = "bicubic"
	InterpolateLbb      InterpolateType = "lbb"      // Lanczos3
	InterpolateNohalo   InterpolateType = "nohalo"
	InterpolateVsqbs    InterpolateType = "vsqbs"
)

// NewInterpolate creates a new Interpolate with the given name
// Valid names include: "nearest", "bilinear", "bicubic", "lbb", "nohalo", "vsqbs"
func NewInterpolate(name InterpolateType) *Interpolate {
	Startup(nil)
	cName := C.CString(string(name))
	defer C.free(unsafe.Pointer(cName))

	interp := C.vips_interpolate_new(cName)
	if interp == nil {
		// Default to bilinear if requested interpolator not found
		cDefault := C.CString("bilinear")
		defer C.free(unsafe.Pointer(cDefault))
		interp = C.vips_interpolate_new(cDefault)
	}
	return &Interpolate{interp: interp}
}

// Close frees the interpolator resources
func (i *Interpolate) Close() {
	if i != nil && i.interp != nil {
		C.g_object_unref(C.gpointer(i.interp))
		i.interp = nil
	}
}
